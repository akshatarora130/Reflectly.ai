datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
  Authenticator Authenticator[]
  journalEntries JournalEntry[]
  journalStats   JournalStats?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

// Chat related models
model ChatSession {
  id        String    @id @default(cuid())
  name      String    @default("New Chat")
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id            String      @id @default(cuid())
  content       String
  role          MessageRole
  chatSessionId String
  chatSession   ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
}

enum MessageRole {
  USER
  ASSISTANT
}

// Journal related models
model JournalEntry {
  id            String    @id @default(cuid())
  content       String    @db.Text
  mood          String?
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis      JournalAnalysis?
  pointsEarned  Int       @default(5)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model JournalAnalysis {
  id             String    @id @default(cuid())
  journalEntryId String    @unique
  journalEntry   JournalEntry @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  result         Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model JournalStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  totalEntries      Int      @default(0)
  totalPoints       Int      @default(0)
  lastEntryDate     DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
